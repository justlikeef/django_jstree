# Generated by Django 3.0.8 on 2020-07-02 17:26

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='jstree',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=25, unique=True)),
                ('description', models.TextField(blank=True, default='')),
                ('appname', models.CharField(max_length=255)),
                ('treemodelname', models.CharField(max_length=255)),
                ('leaffieldname', models.TextField(blank=True, default='', help_text='Name of one or more fields defined in the model which represent a leaf relationship, seperated by commas. ex. leaf1field[,leaf2field,leafthreefield]', verbose_name='Leaf fields')),
                ('enableCheckbox', models.BooleanField(default=False, verbose_name='Add checkboxes before node?')),
                ('enableContextmenu', models.BooleanField(default=False, help_text='Enabling this option requires you to define the context menu based on the node type.', verbose_name='Enable Context Menu Popup?')),
                ('enableSearch', models.BooleanField(default=False, verbose_name='Enable search?')),
                ('enableFuzzySearch', models.BooleanField(default=False, verbose_name='Turn on fuzzy (non-exact) searching and highlighting using simple pattern matching')),
                ('showOnlyMatches', models.BooleanField(default=False, verbose_name='Only show matches when searching?')),
                ('showOnlyMatchesChildren', models.BooleanField(default=False, verbose_name='Show the children of matches when searching?')),
                ('enableDND', models.BooleanField(default=False, help_text='Enabling this option requires additional Javascript to make it do anything', verbose_name='Enable drag and drop functionality')),
                ('enableSort', models.BooleanField(default=False, help_text='Automaticly sort sibling nodes in alphabetical order.', verbose_name='Sort Nodes?')),
                ('enableState', models.BooleanField(default=False, help_text="Remember if the nodes' state the last time this tree was used.", verbose_name='Remember Node State?')),
                ('applyTypes', models.BooleanField(default=False, help_text="If checked, the method 'getTreeNodeType()' will be called on each node in the tree and added to the type parameter on each node. If the function does not exist on the model, then the name of the model class is added to type parameter", verbose_name='Add node type?')),
                ('enableUnique', models.BooleanField(default=False, verbose_name='Require unique names of sibling nodes?')),
                ('enableWholerow', models.BooleanField(default=False, help_text='May cause slowness for large trees or on older browsers.', verbose_name='Allow click on and highlight whole row when selecting nodes?')),
                ('enableChanged', models.BooleanField(default=False, help_text='This plugin adds additional information about selection changes.', verbose_name='Add additonal change info?')),
                ('additionalJS', models.TextField(blank=True, default='')),
            ],
        ),
        migrations.CreateModel(
            name='nodeType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=25)),
                ('description', models.TextField(blank=True, default='')),
                ('maxChildren', models.IntegerField(default=-1, verbose_name='Maximum number of child nodes for this type (-1 unlimited)')),
                ('maxDepth', models.IntegerField(default=-1, verbose_name='Maximum depth of children for this node type (-1 unlimited)')),
                ('iconClass', models.CharField(blank=True, default='', help_text='CSS class name to add to nodes of this type', max_length=30, verbose_name='CSS class')),
                ('liAttributes', models.TextField(blank=True, default='', help_text='Additional attributes to add to the generated LI element', verbose_name='LI Attributes')),
                ('aAttributes', models.TextField(blank=True, default='', help_text='Additional attributes to add to the generated A element', verbose_name='A Attributes')),
                ('childNodeTypes', models.ManyToManyField(blank=True, help_text='Restricts the type of children this node can have (select none for no restrictions)', to='django_jstree.nodeType', verbose_name='Valid Child Node Types')),
                ('jstrees', models.ManyToManyField(help_text='Apply this type to these trees.', related_name='nodeTypes', to='django_jstree.jstree', verbose_name='Trees')),
            ],
        ),
        migrations.CreateModel(
            name='nodeTypePopupMenuItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('displayOrder', models.IntegerField(default=0, help_text='Order to display in on popup Menu', verbose_name='Display order')),
                ('nodeType', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_jstree.nodeType')),
            ],
            options={
                'ordering': ['displayOrder'],
            },
        ),
        migrations.CreateModel(
            name='popupMenuItem',
            fields=[
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=25)),
                ('description', models.TextField(blank=True, default='')),
                ('menuLabel', models.CharField(blank=True, default='', help_text='Text to show on popup menu', max_length=255, verbose_name='Menu Text')),
                ('menuTooltip', models.CharField(blank=True, default='', help_text='Help text to show for menu item', max_length=255, verbose_name='Tooltip')),
                ('seperatorBefore', models.BooleanField(default=False, help_text='Show a seperator before this menu item', verbose_name='Seperator Before?')),
                ('seperatorAfter', models.BooleanField(default=False, help_text='Show a seperator after this menu item', verbose_name='Seperator After?')),
                ('menuItemClass', models.CharField(blank=True, default='', help_text='CSS Class to apply to menu text', max_length=255, verbose_name='Menu Text Class')),
                ('menuClickJSFunction', models.CharField(blank=True, default='', help_text='Name of Javascript function to call on click', max_length=255, verbose_name='Call on click')),
                ('shortcut', models.SmallIntegerField(default=0, help_text='KeyCode which will trigger the action if the menu is open (for example 113 for rename, which equals F2)', verbose_name='Shortcut Keycode')),
                ('shortcutLabel', models.CharField(blank=True, default='', help_text='Shortcut label (like for example F2 for rename)', max_length=20, verbose_name='Shortcut Label')),
                ('childMenuItems', models.ManyToManyField(blank=True, related_name='parentMenuItems', to='django_jstree.popupMenuItem', verbose_name='Child Menu Items')),
                ('nodeTypes', models.ManyToManyField(blank=True, help_text='This popup menu item will apply to this node type', related_name='popupMenuItems', through='django_jstree.nodeTypePopupMenuItem', to='django_jstree.nodeType', verbose_name='Apply to Node Types:')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='nodetypepopupmenuitem',
            name='popupMenuItem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_jstree.popupMenuItem'),
        ),
    ]
